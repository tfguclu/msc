#!/usr/bin/env python

filename = raw_input('Enter a file name: ')

from prody import *
from pylab import *
import numpy

vhl = parsePDB(str(filename)+".pdb")
vhl = vhl.select('protein and heavy')

anm = ANM('pVHL ANM analysis')
anm.buildHessian(vhl, cutoff=9.0)
anm.calcModes(20)

saveModel(anm, str(filename)+"_all", matrices=True)

anm_slc, slc = sliceModel(anm, vhl, "calpha")

saveModel(anm_slc, str(filename)+"_slc", matrices=True)

writePDB(str(filename)+"_slc.pdb", slc)

writeArray("anm_eigvalues.txt", anm_slc.getEigvals(), format="%8.10f")
writeArray("anm_eigv1.txt", anm_slc[0].getArray(), format="%8.10f")
writeArray("anm_eigv2.txt", anm_slc[1].getArray(), format="%8.10f")
writeArray("anm_eigv3.txt", anm_slc[2].getArray(), format="%8.10f")
writeArray("anm_eigv4.txt", anm_slc[3].getArray(), format="%8.10f")
writeArray("anm_eigv5.txt", anm_slc[4].getArray(), format="%8.10f")
writeArray("anm_eigv6.txt", anm_slc[5].getArray(), format="%8.10f")
writeArray("anm_eigv7.txt", anm_slc[6].getArray(), format="%8.10f")
writeArray("anm_eigv8.txt", anm_slc[7].getArray(), format="%8.10f")
writeArray("anm_eigv9.txt", anm_slc[8].getArray(), format="%8.10f")
writeArray("anm_eigv10.txt", anm_slc[9].getArray(), format="%8.10f")
writeArray("anm_eigvdot.txt", anm_slc[0,1,2].getArray(), format="%8.10f")


sq1 = calcSqFlucts(anm_slc[0])
sq2 = calcSqFlucts(anm_slc[1])
sq3 = calcSqFlucts(anm_slc[2])
sq4 = calcSqFlucts(anm_slc[3])
sq5 = calcSqFlucts(anm_slc[4])

numpy.savetxt('sq1.txt',sq1, fmt='%8.10f')
numpy.savetxt('sq2.txt',sq2, fmt='%8.10f')
numpy.savetxt('sq3.txt',sq3, fmt='%8.10f')
numpy.savetxt('sq4.txt',sq4, fmt='%8.10f')
numpy.savetxt('sq5.txt',sq5, fmt='%8.10f')

cc = calcCrossCorr(anm_slc)
numpy.savetxt('cc_'+str(filename)+'.txt',cc, fmt='%8.10f')

def showCrossCorrs(modes, *args, **kwargs):
    """Show cross-correlations using :func:`~matplotlib.pyplot.imshow`.  By
    default, *origin=lower* and *interpolation=bilinear* keyword  arguments
    are passed to this function, but user can overwrite these parameters.
    See also :func:`.calcCrossCorr`."""

    import matplotlib.pyplot as plt
    arange = np.arange(modes.numAtoms())
    cross_correlations = np.zeros((arange[-1]+2, arange[-1]+2))
    cross_correlations[arange[0]+1:,
                       arange[0]+1:] = calcCrossCorr(modes)
    if not 'interpolation' in kwargs:
        kwargs['interpolation'] = 'bilinear'
    if not 'origin' in kwargs:
        kwargs['origin'] = 'lower'
    show = plt.imshow(cross_correlations, *args, **kwargs), plt.colorbar()
    plt.axis([arange[0]+0.5, arange[-1]+1.5, arange[0]+0.5, arange[-1]+1.5])
    return show

showCrossCorrs(anm_slc[0:10])
#showCrossCorr(anm_slc[0:10])

savefig("cc_"+str(filename)+"10", dpi=300, bbox_inches='tight')

raw_input() 


